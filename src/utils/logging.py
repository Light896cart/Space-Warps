import json
from typing import Optional, Dict, Any, List
import matplotlib.pyplot as plt
import torch

def summarize_progressive_growth(
    history: List[Dict[str, Any]],  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ–∂–∏–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏
    model: torch.nn.Module,
    best_val_acc: float,
    save_path: Optional[str] = "progressive_architecture.json",
    show_plot: bool = True,
):
    if not history or best_val_acc == 0.0:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω —Å–ª–æ–π. –ü—Ä–æ–≤–µ—Ä—å:")
        print("   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π")
        print("   - –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä")
        print("   - –†–µ–∞–ª–∏–∑–∞—Ü–∏—é ProgressiveModel.add_block()")
        return

    total_params = sum(p.numel() for p in model.parameters() if p.requires_grad)

    print("\n" + "=" * 60)
    print("üèÜ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ú–û–î–ï–õ–¨ –£–°–ü–ï–®–ù–û –ü–û–°–¢–†–û–ï–ù–ê")
    print("=" * 60)
    print(f"üîπ –ì–ª—É–±–∏–Ω–∞ –º–æ–¥–µ–ª–∏: {len(history)} —Å–ª–æ—ë–≤")
    print(f"üîπ –õ—É—á—à–∞—è val accuracy: {best_val_acc:.4f}")
    print(f"üîπ –û–±—â–µ–µ —á–∏—Å–ª–æ –æ–±—É—á–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_params:,}")

    print("\nüîπ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø–æ —Å–ª–æ—è–º:")
    print(f"{'–°–ª–æ–π':<6} {'k':<4} {'–ö–∞–Ω–∞–ª—ã':<8} {'Accuracy':<10}")
    print("-" * 40)
    for h in history:
        depth = h["layer"]
        k = h["k"]
        c = h["channels"]
        acc = h["val_acc"]
        print(f"{depth:<6} {k:<4} {c:<8} {acc:<10.4f}")  # ‚úÖ –¢–µ–ø–µ—Ä—å acc ‚Äî float

    print("=" * 60)

    # üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    if show_plot:
        fig, ax1 = plt.subplots(figsize=(10, 5))
        depths = [h["layer"] for h in history]
        channels = [h["channels"] for h in history]
        accuracies = [h["val_acc"] for h in history]

        bars = ax1.bar(depths, channels, color='skyblue', edgecolor='navy', alpha=0.8, label='–ö–∞–Ω–∞–ª—ã')
        ax1.set_xlabel('–ù–æ–º–µ—Ä —Å–ª–æ—è', fontsize=12)
        ax1.set_ylabel('–ß–∏—Å–ª–æ –∫–∞–Ω–∞–ª–æ–≤', color='blue', fontsize=12)
        ax1.tick_params(axis='y', labelcolor='blue')
        ax1.set_xticks(depths)
        ax1.set_ylim(0, max(channels) * 1.1)

        for bar, ch in zip(bars, channels):
            ax1.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + max(channels)*0.02,
                     f'{ch}', ha='center', fontsize=10, color='navy')

        ax2 = ax1.twinx()
        ax2.plot(depths, accuracies, color='darkred', marker='o', linewidth=2, markersize=6, label='Accuracy')
        ax2.set_ylabel('Validation Accuracy', color='red', fontsize=12)
        ax2.tick_params(axis='y', labelcolor='red')
        ax2.set_ylim(min(accuracies) * 0.9, max(accuracies) * 1.05)

        plt.title('–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–æ—Å—Ç –º–æ–¥–µ–ª–∏: –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–æ', fontsize=14, pad=20)
        ax1.grid(axis='y', alpha=0.3, linestyle='--')

        from matplotlib.patches import Patch
        from matplotlib.lines import Line2D
        legend_elements = [
            Patch(facecolor='skyblue', edgecolor='navy', label='–ß–∏—Å–ª–æ –∫–∞–Ω–∞–ª–æ–≤'),
            Line2D([0], [0], color='darkred', marker='o', label='Val Accuracy')
        ]
        ax1.legend(handles=legend_elements, loc='upper left')

        fig.tight_layout()
        plt.show()

    # üì¶ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    summary = {
        "final_val_accuracy": round(best_val_acc, 6),
        "num_layers": len(history),
        "total_trainable_params": total_params,
        "architecture": [
            {
                "layer": h["layer"],
                "k": h["k"],
                "channels": h["channels"],
                "val_accuracy": round(h["val_acc"], 6)
            }
            for h in history
        ],
        "model_str": str(model)
    }

    if save_path:
        try:
            with open(save_path, "w", encoding="utf-8") as f:
                json.dump(summary, f, indent=4, ensure_ascii=False)
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {save_path}")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON: {e}")

    return summary